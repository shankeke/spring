<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:c="http://www.springframework.org/schema/c"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util-3.2.xsd
    ">

	<!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		数据连接信息
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		其他配置
		<property name="initialPoolSize" value="${jdbc.pool.initialPoolSize}" />
		<property name="minPoolSize" value="${jdbc.pool.minPoolSize}" />
		<property name="maxPoolSize" value="${jdbc.pool.maxPoolSize}" />
		<property name="maxActive" value="${jdbc.pool.maxActive}" />
		<property name="minIdle" value="${jdbc.pool.minIdle}" />
		<property name="maxIdleTime" value="${jdbc.pool.maxIdleTime}" />
		<property name="maxWait" value="${jdbc.pool.maxWait}" />
		<property name="acquireIncrement" value="${jdbc.pool.acquireIncrement}" />
		<property name="checkoutTimeout" value="${jdbc.pool.checkoutTimeout}" />
		<property name="maxIdleTimeExcessConnections" value="${jdbc.pool.maxIdleTimeExcessConnections}" />
		<property name="idleConnectionTestPeriod" value="${jdbc.pool.idleConnectionTestPeriod}" />
		<property name="acquireRetryAttempts" value="${jdbc.pool.acquireRetryAttempts}" />
		<property name="poolPreparedStatements" value="${jdbc.pool.poolPreparedStatements}" 
			/>
		<property name="breakAfterAcquireFailure" value="${jdbc.pool.breakAfterAcquireFailure}" />
		<property name="testConnectionOnCheckout" value="${jdbc.pool.testConnectionOnCheckout}" />
		<property name="maxStatements" value="${jdbc.pool.maxStatements}" />
		<property name="acquireRetryDelay" value="${jdbc.pool.acquireRetryDelay}" />
		<property name="maxConnectionAge" value="${jdbc.pool.maxConnectionAge}" />
	</bean> -->
	
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 
      <!-- 基本属性 url、user、password -->
      <property name="url" value="${jdbc.url}" />
      <property name="username" value="${jdbc.username}" />
      <property name="password" value="${jdbc.password}" />

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="${jdbc.pool.initialPoolSize}" />
      <property name="minIdle" value="${jdbc.pool.minIdle}" /> 
      <property name="maxActive" value="${jdbc.pool.maxActive}" />

      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="${jdbc.pool.maxWait}" />

      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />

      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />

      <property name="validationQuery" value="SELECT 'x'" />
      <property name="testWhileIdle" value="true" />
      <property name="testOnBorrow" value="false" />
      <property name="testOnReturn" value="false" />

      <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
      <property name="poolPreparedStatements" value="true" />
      <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

      <!-- 配置监控统计拦截的filters -->
      <property name="filters" value="stat" /> 
  </bean>

	<!-- sqlSessionFactory -->
	<bean id="sqlSessionFactory" name="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean" p:dataSource-ref="dataSource"
		p:configLocation="classpath:conf/mybatis/mybatis-config.xml"
		p:mapperLocations="classpath*:conf/mybatis/mapper/**/*.xml"
		p:typeAliasesPackage="com.shanke.mapper" />

	<!-- mapper扫描器 扫描包路径，p:basePackage:如果需要扫描多个包，中间使用半角逗号隔开 -->
	<!-- <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" p:basePackage="com.shanke.dao" 
		p:sqlSessionFactoryBeanName="sqlSessionFactory" /> -->
	<bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.shanke.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 3.2.2版本新特性，markerInterface可以起到mappers配置的作用，详细情况需要看Marker接口类 -->
		<property name="markerInterface" value="com.shanke.common.MyMapper" />
		<!-- 通用Mapper通过属性注入进行配置，默认不配置时会注册Mapper<T>接口 -->
		<property name="properties">
			<value>
				mappers=tk.mybatis.mapper.common.Mapper
			</value>
		</property>
	</bean>

	<!-- sqlSessionTemplate -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate"
		scope="prototype" c:sqlSessionFactory-ref="sqlSessionFactory" />

	<!-- 事务管理配置 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
		p:dataSource-ref="dataSource" />

	<!-- 使用注解事务 -->
	<!-- <tx:annotation-driven transaction-manager="txManager" /> -->
	<!-- 使用aop事务 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 传播行为 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:advisor advice-ref="txAdvice"
			pointcut="execution(* com.shanke.service.*.impl.*.*(..))" />
	</aop:config>
</beans>