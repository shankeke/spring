<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
      http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
      http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
    ">
	<!-- 提供方应用信息，用于计算依赖关系 -->
	<dubbo:application name="dubbo_consumer" />

	<!-- 使用multicast广播注册中心暴露服务地址 -->
	<!-- <dubbo:registry address="multicast://224.5.6.7:1234" /> -->
	<!-- 使用zookeeper注册中心暴露服务地址 -->
	<!-- <dubbo:registry address="zookeeper://127.0.0.1:2180?backup=127.0.0.1:2181,127.0.0.1:2182" 
		/> -->
	<dubbo:registry protocol="zookeeper"
		address="127.0.0.1:2180,127.0.0.1:2181,127.0.0.1:2182" />

	<!-- 使用注解方式暴露接口 -->
	<dubbo:annotation package="com.shanke.dubbo" />

	<context:component-scan base-package="com.shanke"
		annotation-config="true" />


	<mvc:default-servlet-handler />
	<!-- <mvc:view-controller path="/" view-name="redirect:/login" /> -->
	<!-- 静态资源映射 -->
	<mvc:resources location="/resource/" mapping="/resource/**" />
	<mvc:resources location="/css/" mapping="/css/**" />
	<mvc:resources location="/js/" mapping="/js/**" />
	<mvc:resources location="/images/" mapping="/images/**" />

	<aop:aspectj-autoproxy proxy-target-class="true" />

	<!--RequestMappingHandlerAdapter -->
	<mvc:annotation-driven>
		<mvc:message-converters>
			<ref bean="stringHttpMessageConverter" />
			<!-- <ref bean="marshallingHttpMessageConverter" /> -->
			<ref bean="mappingJackson2HttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>
	<!-- 启动Spring MVC的注解功能，完成请求和注解POJO的映射 -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" 
		lazy-init="false" /> -->

	<!-- 另外最好还要加入DefaultAnnotationHandlerMapping，不然会被 XML或其它的映射覆盖！ -->
	<!-- <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" 
		/> -->

	<!-- 字符串转换 -->
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter" />

	<!-- xml转换 -->
	<bean id="castorMarshaller" class="org.springframework.oxm.castor.CastorMarshaller" />
	<bean id="marshallingHttpMessageConverter"
		class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
		<property name="marshaller" ref="castorMarshaller" />
		<property name="unmarshaller" ref="castorMarshaller" />
	</bean>

	<!-- json转换 -->
	<bean id="mappingJackson2HttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>application/xml</value>
				<value>text/html;charset=UTF-8</value>
				<value>text/plain</value>
				<value>text/xml</value>
			</list>
		</property>
	</bean>
	<!--信息转换 - 结束 -->

	<!-- 解析json请求数据，将json转换为java对象 -->
	<bean id="annotationMethodHandlerAdapter"
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<bean
					class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.FormHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.BufferedImageHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.ByteArrayHttpMessageConverter" />

				<bean
					class="org.springframework.http.converter.StringHttpMessageConverter" />
				<bean
					class="org.springframework.http.converter.ResourceHttpMessageConverter" />
				<!--可以增加其他数据类型,请参考spring的API -->
			</list>
		</property>
	</bean>

	<!--内容协商 -->
	<bean
		class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager">
			<bean
				class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
				<property name="defaultContentType" value="text/html" />
				<property name="ignoreAcceptHeader" value="true" />
				<property name="favorPathExtension" value="true" />
				<property name="favorParameter" value="false" />
				<property name="mediaTypes">
					<map>
						<entry key="html" value="text/html" />
						<entry key="xml" value="application/xml" />
						<entry key="json" value="application/json" />
						<entry key="atom" value="application/atom+xml" />
					</map>
				</property>
			</bean>
		</property>
		<!--对模型视图添加前后缀 -->
		<property name="viewResolvers">
			<list>
				<bean
					class="org.springframework.web.servlet.view.InternalResourceViewResolver">
					<property name="viewClass"
						value="org.springframework.web.servlet.view.JstlView" />
					<property name="prefix" value="/WEB-INF/jsp/" />
					<property name="suffix" value=".jsp" />
					<property name="order" value="0" />
				</bean>
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean
					class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
				<bean class="org.springframework.web.servlet.view.xml.MarshallingView">
					<property name="marshaller" ref="castorMarshaller" />
					<!-- <bean class="org.springframework.oxm.xstream.XStreamMarshaller" 
						/> <bean class="org.springframework.oxm.castor.CastorMarshaller" /> </property> -->
				</bean>
			</list>
		</property>
	</bean>

	<!--国际化 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="defaultEncoding" value="UTF-8" />
		<property name="basenames">
			<list>
				<value>i18n.messages</value>
			</list>
		</property>
	</bean>

	<!--文件上传 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="1000000000" />
	</bean>

	<!-- 异常处理 -->
	<!-- 添加对控制层异常拦截 -->
	<!-- <bean id="exceptionHandler" class="com.ysyc.etax.common.component.exception.ExceptionHandler"/> -->

</beans>